Useful functions java
====ARRAYS==========================
Arrays.sort(arr, Collections.reverseOrder()); 
Arrays.sort(arr, new Sortbyroll()); //We can also sort an array according to user defined criteria. 
Arrays.sort(months,
            (String a, String b) -> a.length() - b.length());
    Arrays.sort(toSort, 3, 7);//sort part of array
for (int item: a1) {
Dynamic array => ArrayList
Integer[] a = {0, 1, 2, 3, 4};        // 2. cast an array to a vector
  v1 = new ArrayList<>(Arrays.asList(a));
List<Integer> v3 = new ArrayList<>(v1);     // make an actual copy of v1
Collections.sort(v1);
 v1.remove(v1.size() - 1);

List<List<Integer>> result = new ArrayList<List<Integer>>(); //pay attention how to create
Arrays.copyOf( //It copies the specified array, truncating or padding with false (if necessary) so the copy has the specified length.
===================================
=======STRING============
Integer.parseInt() //string to numeric
Character.getNumericValue( //char to numeric
a.charAt( // get spec index from string
Stringbuilder.reverse()
String.valueOf( //char to string  //int to string
Character.getNumericValue(item) char to int 
char[] gfg = s.toCharArray(); 
result.toString().trim()
for (int j = 0; j < 26; j++)
{
    if((array[i]==(char) ('A' + j))||(array[i]==(char) ('a' + j))){
Character.isLetter(
String.copyValueOf( //chararray to string
 string.indexOf('a') //char in string
 for (char c : T.toCharArray()) { ++count[c - 'a']; }  // count each char in T.(Q:customsortstring)
for (char c = 'a'; c <= 'z'; ++c) {
    while (count[c - 'a']-- > 0) { sb.append(c); }   // group chars in T but not in S.
}

learn difference size and length???
https://way2java.com/arrays/java-made-clear-difference-between-length-and-length/
Str.lastIndexOf('g')	
Arrays.toString(arr)   //array string to single string
Integer.MAX_VALUE
Integer.MIN_VALUE

==========================
================MAP============================================
Map<String,String> table = new HashMap<String, String>();
Map<String, List<String>> map = new HashMap<String, List<String>>();
map.put(String.copyValueOf(arr), list);
Map<Integer, Integer> hashmap = new HashMap<>();
hashmap.putIfAbsent(0, 0);
hashmap.put(1, 1);
hashmap.get(1)
hashmap.remove(2);
hashmap.containsKey(2)
hashmap.containsValue
hashmap.size()
map.getOrDefault(n1, 0)
for (Map.Entry<Integer, Integer> entry : hashmap.entrySet()) {
	System.out.print("(" + entry.getKey() + "," + entry.getValue() + ") ");
hashmap.clear();
hashmap.isEmpty()


map.containsKey(String.copyValueOf(arr))
for (Map.Entry<String, List<String>> entry : map.entrySet()) {
	String key = entry.getKey();
	List<String> value = entry.getValue();
		return new ArrayList<List<String>>(map.values());
		
HashSet<Integer> set = new HashSet<Integer>();
hashSet.add(3);
hashSet.remove(2);
hashSet.contains(2)
for (Integer i : hashSet) {
hashSet.clear();
hashSet.isEmpty()
hashSet.size()
The retainAll() method of java.util.concurrent.CopyOnWriteArraySet class is used to retain from this set all of its elements that are contained in the specified collection.


ArrayList<String> cars = new ArrayList<String>(); // Create an ArrayList object
cars.add("BMW");
cars.get(0);
cars.set(0, "Opel");
cars.remove(0);
cars.clear();
cars.size();

    java.util.Random rand = new java.util.Random();


======BIT MANUPULATION=====
we use bitwise XOR to solve this problem :
first , we have to know the bitwise XOR in java
0 ^ N = N
N ^ N = 0
for(int i:nums) res^=i;



==============QUEUE======================
        Queue<Integer> q = new LinkedList();
q.peek() // GET THE FIRST ELEMENT
        q.offer(5); 
 q.poll(); POP AN ELEMENT
q.size() get the size of the element
        LinkedList<Integer> queue= new LinkedList<Integer>();
queue.offer(code); //push
queue.poll();
